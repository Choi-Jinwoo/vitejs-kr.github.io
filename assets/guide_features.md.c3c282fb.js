import{o as e,c as n,b as s,d as t}from"./app.09df8c85.js";const a='{"title":"Features","description":"","frontmatter":{},"headers":[{"level":2,"title":"NPM Dependency Resolving and Pre-Bundling","slug":"npm-dependency-resolving-and-pre-bundling"},{"level":2,"title":"Hot Module Replacement","slug":"hot-module-replacement"},{"level":2,"title":"TypeScript","slug":"typescript"},{"level":3,"title":"Client Types","slug":"client-types"},{"level":2,"title":"Vue","slug":"vue"},{"level":2,"title":"JSX","slug":"jsx"},{"level":2,"title":"CSS","slug":"css"},{"level":3,"title":"@import Inlining and Rebasing","slug":"import-inlining-and-rebasing"},{"level":3,"title":"PostCSS","slug":"postcss"},{"level":3,"title":"CSS Modules","slug":"css-modules"},{"level":3,"title":"CSS Pre-processors","slug":"css-pre-processors"},{"level":2,"title":"Static Assets","slug":"static-assets"},{"level":2,"title":"JSON","slug":"json"},{"level":2,"title":"Glob Import","slug":"glob-import"},{"level":2,"title":"Web Assembly","slug":"web-assembly"},{"level":2,"title":"Web Workers","slug":"web-workers"},{"level":2,"title":"Build Optimizations","slug":"build-optimizations"},{"level":3,"title":"Dynamic Import Polyfill","slug":"dynamic-import-polyfill"},{"level":3,"title":"CSS Code Splitting","slug":"css-code-splitting"},{"level":3,"title":"Preload Directives Generation","slug":"preload-directives-generation"},{"level":3,"title":"Async Chunk Loading Optimization","slug":"async-chunk-loading-optimization"}],"relativePath":"guide/features.md","lastUpdated":1620969613914}',o={},l=s("h1",{id:"features"},[s("a",{class:"header-anchor",href:"#features","aria-hidden":"true"},"#"),t(" Features")],-1),i=s("p",null,"At the very basic level, developing using Vite is not that much different from using a static file server. However, Vite provides many enhancements over native ESM imports to support various features that are typically seen in bundler-based setups.",-1),r=s("h2",{id:"npm-dependency-resolving-and-pre-bundling"},[s("a",{class:"header-anchor",href:"#npm-dependency-resolving-and-pre-bundling","aria-hidden":"true"},"#"),t(" NPM Dependency Resolving and Pre-Bundling")],-1),c=s("p",null,"Native ES imports do not support bare module imports like the following:",-1),p=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"import"),t(),s("span",{class:"token punctuation"},"{"),t(" someMethod "),s("span",{class:"token punctuation"},"}"),t(),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'my-dep'"),t("\n")])])],-1),u=s("p",null,"The above will throw an error in the browser. Vite will detect such bare module imports in all served source files and perform the following:",-1),d=s("ol",null,[s("li",null,[s("p",null,[s("a",{href:"./dep-pre-bundling.html"},"Pre-bundle"),t(" them to improve page loading speed and convert CommonJS / UMD modules to ESM. The pre-bundling step is performed with "),s("a",{href:"http://esbuild.github.io/",target:"_blank",rel:"noopener noreferrer"},"esbuild"),t(" and makes Vite's cold start time significantly faster than any JavaScript-based bundler.")])]),s("li",null,[s("p",null,[t("Rewrite the imports to valid URLs like "),s("code",null,"/node_modules/.vite/my-dep.js?v=f3sf2ebd"),t(" so that the browser can import them properly.")])])],-1),h=s("p",null,[s("strong",null,"Dependencies are Strongly Cached")],-1),m=s("p",null,[t("Vite caches dependency requests via HTTP headers, so if you wish to locally edit/debug a dependency, follow the steps "),s("a",{href:"./dep-pre-bundling.html#browser-cache"},"here"),t(".")],-1),k=s("h2",{id:"hot-module-replacement"},[s("a",{class:"header-anchor",href:"#hot-module-replacement","aria-hidden":"true"},"#"),t(" Hot Module Replacement")],-1),g=s("p",null,[t("Vite provides an "),s("a",{href:"./api-hmr.html"},"HMR API"),t(" over native ESM. Frameworks with HMR capabilities can leverage the API to provide instant, precise updates without reloading the page or blowing away application state. Vite provides first-party HMR integrations for "),s("a",{href:"https://github.com/vitejs/vite/tree/main/packages/plugin-vue",target:"_blank",rel:"noopener noreferrer"},"Vue Single File Components"),t(" and "),s("a",{href:"https://github.com/vitejs/vite/tree/main/packages/plugin-react-refresh",target:"_blank",rel:"noopener noreferrer"},"React Fast Refresh"),t(". There are also official integrations for Preact via "),s("a",{href:"https://github.com/JoviDeCroock/prefresh/tree/main/packages/vite",target:"_blank",rel:"noopener noreferrer"},"@prefresh/vite"),t(".")],-1),f=s("p",null,[t("Note you don't need to manually set these up - when you "),s("a",{href:"./"},[t("create an app via "),s("code",null,"@vitejs/create-app")]),t(", the selected templates would have these pre-configured for you already.")],-1),y=s("h2",{id:"typescript"},[s("a",{class:"header-anchor",href:"#typescript","aria-hidden":"true"},"#"),t(" TypeScript")],-1),b=s("p",null,[t("Vite supports importing "),s("code",null,".ts"),t(" files out of the box.")],-1),v=s("p",null,[t("Vite only performs transpilation on "),s("code",null,".ts"),t(" files and does "),s("strong",null,"NOT"),t(" perform type checking. It assumes type checking is taken care of by your IDE and build process (you can run "),s("code",null,"tsc --noEmit"),t(" in the build script or install "),s("code",null,"vue-tsc"),t(" and run "),s("code",null,"vue-tsc --noEmit"),t(" to also type check your "),s("code",null,"*.vue"),t(" files).")],-1),w=s("p",null,[t("Vite uses "),s("a",{href:"https://github.com/evanw/esbuild",target:"_blank",rel:"noopener noreferrer"},"esbuild"),t(" to transpile TypeScript into JavaScript which is about 20~30x faster than vanilla "),s("code",null,"tsc"),t(", and HMR updates can reflect in the browser in under 50ms.")],-1),S=s("p",null,[t("Note that because "),s("code",null,"esbuild"),t(" only performs transpilation without type information, it doesn't support certain features like const enum and implicit type-only imports. You must set "),s("code",null,'"isolatedModules": true'),t(" in your "),s("code",null,"tsconfig.json"),t(" under "),s("code",null,"compilerOptions"),t(" so that TS will warn you against the features that do not work with isolated transpilation.")],-1),j=s("h3",{id:"client-types"},[s("a",{class:"header-anchor",href:"#client-types","aria-hidden":"true"},"#"),t(" Client Types")],-1),C=s("p",null,[t("Vite's default types are for its Node.js API. To shim the environment of client side code in a Vite application, add "),s("code",null,"vite/client"),t(" to "),s("code",null,"compilerOptions.types"),t(" of your "),s("code",null,"tsconfig"),t(":")],-1),x=s("div",{class:"language-json"},[s("pre",null,[s("code",null,[s("span",{class:"token punctuation"},"{"),t("\n  "),s("span",{class:"token property"},'"compilerOptions"'),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"{"),t("\n    "),s("span",{class:"token property"},'"types"'),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"["),s("span",{class:"token string"},'"vite/client"'),s("span",{class:"token punctuation"},"]"),t("\n  "),s("span",{class:"token punctuation"},"}"),t("\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),_=s("p",null,"This will provide the following type shims:",-1),V=s("ul",null,[s("li",null,[t("Asset imports (e.g. importing an "),s("code",null,".svg"),t(" file)")]),s("li",null,[t("Types for the Vite-injected "),s("a",{href:"./env-and-mode.html#env-variables"},"env variables"),t(" on "),s("code",null,[t("import."),s("wbr"),t("meta.env")])]),s("li",null,[t("Types for the "),s("a",{href:"./api-hmr.html"},"HMR API"),t(" on "),s("code",null,[t("import."),s("wbr"),t("meta.hot")])])],-1),I=s("h2",{id:"vue"},[s("a",{class:"header-anchor",href:"#vue","aria-hidden":"true"},"#"),t(" Vue")],-1),T=s("p",null,"Vite provides first-class Vue support:",-1),M=s("ul",null,[s("li",null,[t("Vue 3 SFC support via "),s("a",{href:"https://github.com/vitejs/vite/tree/main/packages/plugin-vue",target:"_blank",rel:"noopener noreferrer"},"@vitejs/plugin-vue")]),s("li",null,[t("Vue 3 JSX support via "),s("a",{href:"https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx",target:"_blank",rel:"noopener noreferrer"},"@vitejs/plugin-vue-jsx")]),s("li",null,[t("Vue 2 support via "),s("a",{href:"https://github.com/underfin/vite-plugin-vue2",target:"_blank",rel:"noopener noreferrer"},"underfin/vite-plugin-vue2")])],-1),P=s("h2",{id:"jsx"},[s("a",{class:"header-anchor",href:"#jsx","aria-hidden":"true"},"#"),t(" JSX")],-1),R=s("p",null,[s("code",null,".jsx"),t(" and "),s("code",null,".tsx"),t(" files are also supported out of the box. JSX transpilation is also handled via "),s("a",{href:"https://esbuild.github.io",target:"_blank",rel:"noopener noreferrer"},"ESBuild"),t(", and defaults to the React 16 flavor. React 17 style JSX support in ESBuild is tracked "),s("a",{href:"https://github.com/evanw/esbuild/issues/334",target:"_blank",rel:"noopener noreferrer"},"here"),t(".")],-1),A=s("p",null,[t("Vue users should use the official "),s("a",{href:"https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx",target:"_blank",rel:"noopener noreferrer"},"@vitejs/plugin-vue-jsx"),t(" plugin, which provides Vue 3 specific features including HMR, global component resolving, directives and slots.")],-1),E=s("p",null,[t("If not using JSX with React or Vue, custom "),s("code",null,"jsxFactory"),t(" and "),s("code",null,"jsxFragment"),t(" can be configured using the "),s("a",{href:"/config/#esbuild"},[s("code",null,"esbuild"),t(" option")]),t(". For example for Preact:")],-1),W=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// vite.config.js"),t("\n"),s("span",{class:"token keyword"},"export"),t(),s("span",{class:"token keyword"},"default"),t(),s("span",{class:"token punctuation"},"{"),t("\n  esbuild"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"{"),t("\n    jsxFactory"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token string"},"'h'"),s("span",{class:"token punctuation"},","),t("\n    jsxFragment"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token string"},"'Fragment'"),t("\n  "),s("span",{class:"token punctuation"},"}"),t("\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),F=s("p",null,[t("More details in "),s("a",{href:"https://esbuild.github.io/content-types/#jsx",target:"_blank",rel:"noopener noreferrer"},"ESBuild docs"),t(".")],-1),z=s("p",null,[t("You can inject the JSX helpers using "),s("code",null,"jsxInject"),t(" (which is a Vite-only option) to avoid manual imports:")],-1),L=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// vite.config.js"),t("\n"),s("span",{class:"token keyword"},"export"),t(),s("span",{class:"token keyword"},"default"),t(),s("span",{class:"token punctuation"},"{"),t("\n  esbuild"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"{"),t("\n    jsxInject"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token template-string"},[s("span",{class:"token template-punctuation string"},"`"),s("span",{class:"token string"},"import React from 'react'"),s("span",{class:"token template-punctuation string"},"`")]),t("\n  "),s("span",{class:"token punctuation"},"}"),t("\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),D=s("h2",{id:"css"},[s("a",{class:"header-anchor",href:"#css","aria-hidden":"true"},"#"),t(" CSS")],-1),H=s("p",null,[t("Importing "),s("code",null,".css"),t(" files will inject its content to the page via a "),s("code",null,"<style>"),t(" tag with HMR support. You can also retrieve the processed CSS as a string as the module's default export.")],-1),J=s("h3",{id:"import-inlining-and-rebasing"},[s("a",{class:"header-anchor",href:"#import-inlining-and-rebasing","aria-hidden":"true"},"#"),t(),s("code",null,"@import"),t(" Inlining and Rebasing")],-1),O=s("p",null,[t("Vite is pre-configured to support CSS "),s("code",null,"@import"),t(" inlining via "),s("code",null,"postcss-import"),t(". Vite aliases are also respected for CSS "),s("code",null,"@import"),t(". In addition, all CSS "),s("code",null,"url()"),t(" references, even if the imported files are in different directories, are always automatically rebased to ensure correctness.")],-1),N=s("p",null,[s("code",null,"@import"),t(" aliases and URL rebasing are also supported for Sass and Less files (see "),s("a",{href:"#css-pre-processors"},"CSS Pre-processors"),t(").")],-1),B=s("h3",{id:"postcss"},[s("a",{class:"header-anchor",href:"#postcss","aria-hidden":"true"},"#"),t(" PostCSS")],-1),U=s("p",null,[t("If the project contains valid PostCSS config (any format supported by "),s("a",{href:"https://github.com/postcss/postcss-load-config",target:"_blank",rel:"noopener noreferrer"},"postcss-load-config"),t(", e.g. "),s("code",null,"postcss.config.js"),t("), it will be automatically applied to all imported CSS.")],-1),q=s("h3",{id:"css-modules"},[s("a",{class:"header-anchor",href:"#css-modules","aria-hidden":"true"},"#"),t(" CSS Modules")],-1),G=s("p",null,[t("Any CSS file ending with "),s("code",null,".module.css"),t(" is considered a "),s("a",{href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer"},"CSS modules file"),t(". Importing such a file will return the corresponding module object:")],-1),X=s("div",{class:"language-css"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"/* example.module.css */"),t("\n"),s("span",{class:"token selector"},".red"),t(),s("span",{class:"token punctuation"},"{"),t("\n  "),s("span",{class:"token property"},"color"),s("span",{class:"token punctuation"},":"),t(" red"),s("span",{class:"token punctuation"},";"),t("\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Y=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"import"),t(" classes "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./example.module.css'"),t("\ndocument"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getElementById"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'foo'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),t("className "),s("span",{class:"token operator"},"="),t(" classes"),s("span",{class:"token punctuation"},"."),t("red\n")])])],-1),K=s("p",null,[t("CSS modules behavior can be configured via the "),s("a",{href:"/config/#css-modules"},[s("code",null,"css.modules"),t(" option")]),t(".")],-1),Q=s("p",null,[t("If "),s("code",null,"css.modules.localsConvention"),t(" is set to enable camelCase locals (e.g. "),s("code",null,"localsConvention: 'camelCaseOnly'"),t("), you can also use named imports:")],-1),Z=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// .apply-color -> applyColor"),t("\n"),s("span",{class:"token keyword"},"import"),t(),s("span",{class:"token punctuation"},"{"),t(" applyColor "),s("span",{class:"token punctuation"},"}"),t(),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./example.module.css'"),t("\ndocument"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getElementById"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'foo'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),t("className "),s("span",{class:"token operator"},"="),t(" applyColor\n")])])],-1),$=s("h3",{id:"css-pre-processors"},[s("a",{class:"header-anchor",href:"#css-pre-processors","aria-hidden":"true"},"#"),t(" CSS Pre-processors")],-1),ee=s("p",null,[t("Because Vite targets modern browsers only, it is recommended to use native CSS variables with PostCSS plugins that implement CSSWG drafts (e.g. "),s("a",{href:"https://github.com/jonathantneal/postcss-nesting",target:"_blank",rel:"noopener noreferrer"},"postcss-nesting"),t(") and author plain, future-standards-compliant CSS.")],-1),ne=s("p",null,[t("That said, Vite does provide built-in support for "),s("code",null,".scss"),t(", "),s("code",null,".sass"),t(", "),s("code",null,".less"),t(", "),s("code",null,".styl"),t(" and "),s("code",null,".stylus"),t(" files. There is no need to install Vite-specific plugins for them, but the corresponding pre-processor itself must be installed:")],-1),se=s("div",{class:"language-bash"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"# .scss and .sass"),t("\n"),s("span",{class:"token function"},"npm"),t(),s("span",{class:"token function"},"install"),t(" -D sass\n\n"),s("span",{class:"token comment"},"# .less"),t("\n"),s("span",{class:"token function"},"npm"),t(),s("span",{class:"token function"},"install"),t(" -D "),s("span",{class:"token function"},"less"),t("\n\n"),s("span",{class:"token comment"},"# .styl and .stylus"),t("\n"),s("span",{class:"token function"},"npm"),t(),s("span",{class:"token function"},"install"),t(" -D stylus\n")])])],-1),te=s("p",null,[t("If using Vue single file components, this also automatically enables "),s("code",null,'<style lang="sass">'),t(" et al.")],-1),ae=s("p",null,[t("Vite improves "),s("code",null,"@import"),t(" resolving for Sass and Less so that Vite aliases are also respected. In addition, relative "),s("code",null,"url()"),t(" references inside imported Sass/Less files that are in different directories from the root file are also automatically rebased to ensure correctness.")],-1),oe=s("p",null,[s("code",null,"@import"),t(" alias and url rebasing are not supported for Stylus due to its API constraints.")],-1),le=s("p",null,[t("You can also use CSS modules combined with pre-processors by prepending "),s("code",null,".module"),t(" to the file extension, for example "),s("code",null,"style.module.scss"),t(".")],-1),ie=s("h2",{id:"static-assets"},[s("a",{class:"header-anchor",href:"#static-assets","aria-hidden":"true"},"#"),t(" Static Assets")],-1),re=s("p",null,"Importing a static asset will return the resolved public URL when it is served:",-1),ce=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"import"),t(" imgUrl "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./img.png'"),t("\ndocument"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"getElementById"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'hero-img'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),t("src "),s("span",{class:"token operator"},"="),t(" imgUrl\n")])])],-1),pe=s("p",null,"Special queries can modify how assets are loaded:",-1),ue=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// Explicitly load assets as URL"),t("\n"),s("span",{class:"token keyword"},"import"),t(" assetAsURL "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./asset.js?url'"),t("\n")])])],-1),de=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// Load assets as strings"),t("\n"),s("span",{class:"token keyword"},"import"),t(" assetAsString "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./shader.glsl?raw'"),t("\n")])])],-1),he=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// Load Web Workers"),t("\n"),s("span",{class:"token keyword"},"import"),t(" Worker "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./worker.js?worker'"),t("\n")])])],-1),me=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// Web Workers inlined as base64 strings at build time"),t("\n"),s("span",{class:"token keyword"},"import"),t(" InlineWorker "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./worker.js?worker&inline'"),t("\n")])])],-1),ke=s("p",null,[t("More details in "),s("a",{href:"./assets.html"},"Static Asset Handling"),t(".")],-1),ge=s("h2",{id:"json"},[s("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),t(" JSON")],-1),fe=s("p",null,"JSON files can be directly imported - named imports are also supported:",-1),ye=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// import the entire object"),t("\n"),s("span",{class:"token keyword"},"import"),t(" json "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./example.json'"),t("\n"),s("span",{class:"token comment"},"// import a root field as named exports - helps with treeshaking!"),t("\n"),s("span",{class:"token keyword"},"import"),t(),s("span",{class:"token punctuation"},"{"),t(" field "),s("span",{class:"token punctuation"},"}"),t(),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./example.json'"),t("\n")])])],-1),be=s("h2",{id:"glob-import"},[s("a",{class:"header-anchor",href:"#glob-import","aria-hidden":"true"},"#"),t(" Glob Import")],-1),ve=s("p",null,[t("Vite supports importing multiple modules from the file system via the special "),s("code",null,[t("import."),s("wbr"),t("meta.glob")]),t(" function:")],-1),we=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),t(" modules "),s("span",{class:"token operator"},"="),t(),s("span",{class:"token keyword"},"import"),s("span",{class:"token punctuation"},"."),t("meta"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"glob"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'./dir/*.js'"),s("span",{class:"token punctuation"},")"),t("\n")])])],-1),Se=s("p",null,"The above will be transformed into the following:",-1),je=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// code produced by vite"),t("\n"),s("span",{class:"token keyword"},"const"),t(" modules "),s("span",{class:"token operator"},"="),t(),s("span",{class:"token punctuation"},"{"),t("\n  "),s("span",{class:"token string"},"'./dir/foo.js'"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token operator"},"=>"),t(),s("span",{class:"token keyword"},"import"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'./dir/foo.js'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},","),t("\n  "),s("span",{class:"token string"},"'./dir/bar.js'"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token operator"},"=>"),t(),s("span",{class:"token keyword"},"import"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'./dir/bar.js'"),s("span",{class:"token punctuation"},")"),t("\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Ce=s("p",null,[t("You can then iterate over the keys of the "),s("code",null,"modules"),t(" object to access the corresponding modules:")],-1),xe=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"for"),t(),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"const"),t(" path "),s("span",{class:"token keyword"},"in"),t(" modules"),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token punctuation"},"{"),t("\n  modules"),s("span",{class:"token punctuation"},"["),t("path"),s("span",{class:"token punctuation"},"]"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token parameter"},"mod"),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token operator"},"=>"),t(),s("span",{class:"token punctuation"},"{"),t("\n    console"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"log"),s("span",{class:"token punctuation"},"("),t("path"),s("span",{class:"token punctuation"},","),t(" mod"),s("span",{class:"token punctuation"},")"),t("\n  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),t("\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),_e=s("p",null,[t("Matched files are by default lazy loaded via dynamic import and will be split into separate chunks during build. If you'd rather import all the modules directly (e.g. relying on side-effects in these modules to be applied first), you can use "),s("code",null,[t("import."),s("wbr"),t("meta.globEager")]),t(" instead:")],-1),Ve=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"const"),t(" modules "),s("span",{class:"token operator"},"="),t(),s("span",{class:"token keyword"},"import"),s("span",{class:"token punctuation"},"."),t("meta"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"globEager"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'./dir/*.js'"),s("span",{class:"token punctuation"},")"),t("\n")])])],-1),Ie=s("p",null,"The above will be transformed into the following:",-1),Te=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token comment"},"// code produced by vite"),t("\n"),s("span",{class:"token keyword"},"import"),t(),s("span",{class:"token operator"},"*"),t(),s("span",{class:"token keyword"},"as"),t(" __glob__0_0 "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./dir/foo.js'"),t("\n"),s("span",{class:"token keyword"},"import"),t(),s("span",{class:"token operator"},"*"),t(),s("span",{class:"token keyword"},"as"),t(" __glob__0_1 "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./dir/bar.js'"),t("\n"),s("span",{class:"token keyword"},"const"),t(" modules "),s("span",{class:"token operator"},"="),t(),s("span",{class:"token punctuation"},"{"),t("\n  "),s("span",{class:"token string"},"'./dir/foo.js'"),s("span",{class:"token operator"},":"),t(" __glob__0_0"),s("span",{class:"token punctuation"},","),t("\n  "),s("span",{class:"token string"},"'./dir/bar.js'"),s("span",{class:"token operator"},":"),t(" __glob__0_1\n"),s("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Me=s("p",null,"Note that:",-1),Pe=s("ul",null,[s("li",null,"This is a Vite-only feature and is not a web or ES standard."),s("li",null,[t("The glob patterns are treated like import specifiers: they must be either relative (start with "),s("code",null,"./"),t(") or absolute (start with "),s("code",null,"/"),t(", resolved relative to project root). Globbing from dependencies is not supported.")]),s("li",null,[t("The glob matching is done via "),s("code",null,"fast-glob"),t(" - check out its documentation for "),s("a",{href:"https://github.com/mrmlnc/fast-glob#pattern-syntax",target:"_blank",rel:"noopener noreferrer"},"supported glob patterns"),t(".")])],-1),Re=s("h2",{id:"web-assembly"},[s("a",{class:"header-anchor",href:"#web-assembly","aria-hidden":"true"},"#"),t(" Web Assembly")],-1),Ae=s("p",null,[t("Pre-compiled "),s("code",null,".wasm"),t(" files can be directly imported - the default export will be an initialization function that returns a Promise of the exports object of the wasm instance:")],-1),Ee=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"import"),t(" init "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./example.wasm'"),t("\n\n"),s("span",{class:"token function"},"init"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token parameter"},"exports"),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token operator"},"=>"),t(),s("span",{class:"token punctuation"},"{"),t("\n  exports"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"test"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),t("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),t("\n")])])],-1),We=s("p",null,[t("The init function can also take the "),s("code",null,"imports"),t(" object which is passed along to "),s("code",null,"WebAssembly.instantiate"),t(" as its second argument:")],-1),Fe=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"init"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),t("\n  imports"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"{"),t("\n    "),s("span",{class:"token function-variable function"},"someFunc"),s("span",{class:"token operator"},":"),t(),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token operator"},"=>"),t(),s("span",{class:"token punctuation"},"{"),t("\n      "),s("span",{class:"token comment"},"/* ... */"),t("\n    "),s("span",{class:"token punctuation"},"}"),t("\n  "),s("span",{class:"token punctuation"},"}"),t("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"then"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),t(),s("span",{class:"token operator"},"=>"),t(),s("span",{class:"token punctuation"},"{"),t("\n  "),s("span",{class:"token comment"},"/* ... */"),t("\n"),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),t("\n")])])],-1),ze=s("p",null,[t("In the production build, "),s("code",null,".wasm"),t(" files smaller than "),s("code",null,"assetInlineLimit"),t(" will be inlined as base64 strings. Otherwise, they will be copied to the dist directory as an asset and fetched on-demand.")],-1),Le=s("h2",{id:"web-workers"},[s("a",{class:"header-anchor",href:"#web-workers","aria-hidden":"true"},"#"),t(" Web Workers")],-1),De=s("p",null,[t("A web worker script can be directly imported by appending "),s("code",null,"?worker"),t(" to the import request. The default export will be a custom worker constructor:")],-1),He=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"import"),t(" MyWorker "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./worker?worker'"),t("\n\n"),s("span",{class:"token keyword"},"const"),t(" worker "),s("span",{class:"token operator"},"="),t(),s("span",{class:"token keyword"},"new"),t(),s("span",{class:"token class-name"},"MyWorker"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),t("\n")])])],-1),Je=s("p",null,[t("The worker script can also use "),s("code",null,"import"),t(" statements instead of "),s("code",null,"importScripts()"),t(" - note during dev this relies on browser native support and currently only works in Chrome, but for the production build it is compiled away.")],-1),Oe=s("p",null,[t("By default, the worker script will be emitted as a separate chunk in the production build. If you wish to inline the worker as base64 strings, add the "),s("code",null,"inline"),t(" query:")],-1),Ne=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token keyword"},"import"),t(" MyWorker "),s("span",{class:"token keyword"},"from"),t(),s("span",{class:"token string"},"'./worker?worker&inline'"),t("\n")])])],-1),Be=s("h2",{id:"build-optimizations"},[s("a",{class:"header-anchor",href:"#build-optimizations","aria-hidden":"true"},"#"),t(" Build Optimizations")],-1),Ue=s("blockquote",null,[s("p",null,"Features listed below are automatically applied as part of the build process and there is no need for explicit configuration unless you want to disable them.")],-1),qe=s("h3",{id:"dynamic-import-polyfill"},[s("a",{class:"header-anchor",href:"#dynamic-import-polyfill","aria-hidden":"true"},"#"),t(" Dynamic Import Polyfill")],-1),Ge=s("p",null,[t("Vite uses ES dynamic import as code-splitting points. The generated code will also use dynamic imports to load the async chunks. However, native ESM dynamic imports support landed later than ESM via script tags and there is a browser support discrepancy between the two features. Vite automatically injects a light-weight "),s("a",{href:"https://github.com/GoogleChromeLabs/dynamic-import-polyfill",target:"_blank",rel:"noopener noreferrer"},"dynamic import polyfill"),t(" to ease out that difference.")],-1),Xe=s("p",null,[t("If you know you are only targeting browsers with native dynamic import support, you can explicitly disable this feature via "),s("a",{href:"/config/#build-polyfilldynamicimport"},[s("code",null,"build.polyfillDynamicImport")]),t(".")],-1),Ye=s("h3",{id:"css-code-splitting"},[s("a",{class:"header-anchor",href:"#css-code-splitting","aria-hidden":"true"},"#"),t(" CSS Code Splitting")],-1),Ke=s("p",null,[t("Vite automatically extracts the CSS used by modules in an async chunk and generate a separate file for it. The CSS file is automatically loaded via a "),s("code",null,"<link>"),t(" tag when the associated async chunk is loaded, and the async chunk is guaranteed to only be evaluated after the CSS is loaded to avoid "),s("a",{href:"https://en.wikipedia.org/wiki/Flash_of_unstyled_content#:~:text=A%20flash%20of%20unstyled%20content,before%20all%20information%20is%20retrieved.",target:"_blank",rel:"noopener noreferrer"},"FOUC"),t(".")],-1),Qe=s("p",null,[t("If you'd rather have all the CSS extracted into a single file, you can disable CSS code splitting by setting "),s("a",{href:"/config/#build-csscodesplit"},[s("code",null,"build.cssCodeSplit")]),t(" to "),s("code",null,"false"),t(".")],-1),Ze=s("h3",{id:"preload-directives-generation"},[s("a",{class:"header-anchor",href:"#preload-directives-generation","aria-hidden":"true"},"#"),t(" Preload Directives Generation")],-1),$e=s("p",null,[t("Vite automatically generates "),s("code",null,'<link rel="modulepreload">'),t(" directives for entry chunks and their direct imports in the built HTML.")],-1),en=s("h3",{id:"async-chunk-loading-optimization"},[s("a",{class:"header-anchor",href:"#async-chunk-loading-optimization","aria-hidden":"true"},"#"),t(" Async Chunk Loading Optimization")],-1),nn=s("p",null,'In real world applications, Rollup often generates "common" chunks - code that is shared between two or more other chunks. Combined with dynamic imports, it is quite common to have the following scenario:',-1),sn=s("p",null,[s("img",{src:"/docs-next/assets/graph.8f2f36b7.png",alt:"graph"})],-1),tn=s("p",null,[t("In the non-optimized scenarios, when async chunk "),s("code",null,"A"),t(" is imported, the browser will have to request and parse "),s("code",null,"A"),t(" before it can figure out that it also needs the common chunk "),s("code",null,"C"),t(". This results in an extra network roundtrip:")],-1),an=s("div",{class:"language-"},[s("pre",null,[s("code",null,"Entry ---\x3e A ---\x3e C\n")])],-1),on=s("p",null,[t("Vite automatically rewrites code-split dynamic import calls with a preload step so that when "),s("code",null,"A"),t(" is requested, "),s("code",null,"C"),t(" is fetched "),s("strong",null,"in parallel"),t(":")],-1),ln=s("div",{class:"language-"},[s("pre",null,[s("code",null,"Entry ---\x3e (A + C)\n")])],-1),rn=s("p",null,[t("It is possible for "),s("code",null,"C"),t(" to have further imports, which will result in even more roundtrips in the un-optimized scenario. Vite's optimization will trace all the direct imports to completely eliminate the roundtrips regardless of import depth.")],-1);o.render=function(s,t,a,o,cn,pn){return e(),n("div",null,[l,i,r,c,p,u,d,h,m,k,g,f,y,b,v,w,S,j,C,x,_,V,I,T,M,P,R,A,E,W,F,z,L,D,H,J,O,N,B,U,q,G,X,Y,K,Q,Z,$,ee,ne,se,te,ae,oe,le,ie,re,ce,pe,ue,de,he,me,ke,ge,fe,ye,be,ve,we,Se,je,Ce,xe,_e,Ve,Ie,Te,Me,Pe,Re,Ae,Ee,We,Fe,ze,Le,De,He,Je,Oe,Ne,Be,Ue,qe,Ge,Xe,Ye,Ke,Qe,Ze,$e,en,nn,sn,tn,an,on,ln,rn])};export default o;export{a as __pageData};
