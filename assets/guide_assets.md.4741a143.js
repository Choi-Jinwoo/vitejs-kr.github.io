import{o as e,c as s,d as a}from"./app.5ce87161.js";const t='{"title":"Static Asset Handling","description":"","frontmatter":{},"headers":[{"level":2,"title":"Importing Asset as URL","slug":"importing-asset-as-url"},{"level":3,"title":"Explicit URL Imports","slug":"explicit-url-imports"},{"level":3,"title":"Importing Asset as String","slug":"importing-asset-as-string"},{"level":3,"title":"Importing Script as a Worker","slug":"importing-script-as-a-worker"},{"level":2,"title":"The public Directory","slug":"the-public-directory"}],"relativePath":"guide/assets.md","lastUpdated":1620885976014}',n={},i=a('<h1 id="static-asset-handling"><a class="header-anchor" href="#static-asset-handling" aria-hidden="true">#</a> Static Asset Handling</h1><ul><li>Related: <a href="./build.html#public-base-path">Public Base Path</a></li><li>Related: <a href="/config/#assetsinclude"><code>assetsInclude</code> config option</a></li></ul><h2 id="importing-asset-as-url"><a class="header-anchor" href="#importing-asset-as-url" aria-hidden="true">#</a> Importing Asset as URL</h2><p>Importing a static asset will return the resolved public URL when it is served:</p><div class="language-js"><pre><code><span class="token keyword">import</span> imgUrl <span class="token keyword">from</span> <span class="token string">&#39;./img.png&#39;</span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hero-img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl\n</code></pre></div><p>For example, <code>imgUrl</code> will be <code>/img.png</code> during development, and become <code>/assets/img.2d8efhg.png</code> in the production build.</p><p>The behavior is similar to webpack&#39;s <code>file-loader</code>. The difference is that the import can be either using absolute public paths (based on project root during dev) or relative paths.</p><ul><li><p><code>url()</code> references in CSS are handled the same way.</p></li><li><p>If using the Vue plugin, asset references in Vue SFC templates are automatically converted into imports.</p></li><li><p>Common image, media, and font filetypes are detected as assets automatically. You can extend the internal list using the <a href="/config/#assetsinclude"><code>assetsInclude</code> option</a>.</p></li><li><p>Referenced assets are included as part of the build assets graph, will get hashed file names, and can be processed by plugins for optimization.</p></li><li><p>Assets smaller in bytes than the <a href="/config/#assetsinlinelimit"><code>assetsInlineLimit</code> option</a> will be inlined as base64 data URLs.</p></li></ul><h3 id="explicit-url-imports"><a class="header-anchor" href="#explicit-url-imports" aria-hidden="true">#</a> Explicit URL Imports</h3><p>Assets that are not included in the internal list or in <code>assetsInclude</code>, can be explicitly imported as an URL using the <code>?url</code> suffix. This is useful, for example, to import <a href="https://houdini.how/usage" target="_blank" rel="noopener noreferrer">Houdini Paint Worklets</a>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> workletURL <span class="token keyword">from</span> <span class="token string">&#39;extra-scalloped-border/worklet.js?url&#39;</span>\n<span class="token constant">CSS</span><span class="token punctuation">.</span>paintWorklet<span class="token punctuation">.</span><span class="token function">addModule</span><span class="token punctuation">(</span>workletURL<span class="token punctuation">)</span>\n</code></pre></div><h3 id="importing-asset-as-string"><a class="header-anchor" href="#importing-asset-as-string" aria-hidden="true">#</a> Importing Asset as String</h3><p>Assets can be imported as strings using the <code>?raw</code> suffix.</p><div class="language-js"><pre><code><span class="token keyword">import</span> shaderString <span class="token keyword">from</span> <span class="token string">&#39;./shader.glsl?raw&#39;</span>\n</code></pre></div><h3 id="importing-script-as-a-worker"><a class="header-anchor" href="#importing-script-as-a-worker" aria-hidden="true">#</a> Importing Script as a Worker</h3><p>Scripts can be imported as web workers with the <code>?worker</code> suffix.</p><div class="language-js"><pre><code><span class="token comment">// Separate chunk in the production build</span>\n<span class="token keyword">import</span> Worker <span class="token keyword">from</span> <span class="token string">&#39;./shader.js?worker&#39;</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// Inlined as base64 strings</span>\n<span class="token keyword">import</span> InlineWorker <span class="token keyword">from</span> <span class="token string">&#39;./shader.js?worker&amp;inline&#39;</span>\n</code></pre></div><p>Check out the <a href="./features.html#web-workers">Web Worker section</a> for more details.</p><h2 id="the-public-directory"><a class="header-anchor" href="#the-public-directory" aria-hidden="true">#</a> The <code>public</code> Directory</h2><p>If you have assets that are:</p><ul><li>Never referenced in source code (e.g. <code>robots.txt</code>)</li><li>Must retain the exact same file name (without hashing)</li><li>...or you simply don&#39;t want to have to import an asset first just to get its URL</li></ul><p>Then you can place the asset in a special <code>public</code> directory under your project root. Assets in this directory will be served at root path <code>/</code> during dev, and copied to the root of the dist directory as-is.</p><p>The directory defaults to <code>&lt;root&gt;/public</code>, but can be configured via the <a href="/config/#publicdir"><code>publicDir</code> option</a>.</p><p>Note that:</p><ul><li>You should always reference <code>public</code> assets using root absolute path - for example, <code>public/icon.png</code> should be referenced in source code as <code>/icon.png</code>.</li><li>Assets in <code>public</code> cannot be imported from JavaScript.</li></ul>',26);n.render=function(a,t,n,o,r,p){return e(),s("div",null,[i])};export default n;export{t as __pageData};
