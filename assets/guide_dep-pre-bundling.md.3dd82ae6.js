import{o as e,c as o,a as n}from"./app.09df8c85.js";const a='{"title":"Dependency Pre-Bundling","description":"","frontmatter":{},"headers":[{"level":2,"title":"The Why","slug":"the-why"},{"level":2,"title":"Automatic Dependency Discovery","slug":"automatic-dependency-discovery"},{"level":2,"title":"Monorepos and Linked Dependencies","slug":"monorepos-and-linked-dependencies"},{"level":2,"title":"Customizing the Behavior","slug":"customizing-the-behavior"},{"level":2,"title":"Caching","slug":"caching"},{"level":3,"title":"File System Cache","slug":"file-system-cache"},{"level":3,"title":"Browser Cache","slug":"browser-cache"}],"relativePath":"guide/dep-pre-bundling.md","lastUpdated":1620969613914}',t={},d=n('<h1 id="dependency-pre-bundling"><a class="header-anchor" href="#dependency-pre-bundling" aria-hidden="true">#</a> Dependency Pre-Bundling</h1><p>When you run <code>vite</code> for the first time, you may notice this message:</p><div class="language-"><pre><code>Optimizable dependencies detected:\nreact, react-dom\nPre-bundling them to speed up dev server page load...\n(this will be run only when your dependencies have changed)\n</code></pre></div><h2 id="the-why"><a class="header-anchor" href="#the-why" aria-hidden="true">#</a> The Why</h2><p>This is Vite performing what we call &quot;dependency pre-bundling&quot;. This process serves two purposes:</p><ol><li><p><strong>CommonJS and UMD compatibility:</strong> During development, Vite&#39;s dev serves all code as native ESM. Therefore, Vite must convert dependencies that are shipped as CommonJS or UMD into ESM first.</p><p>When converting CommonJS dependencies, Vite performs smart import analysis so that named imports to CommonJS modules will work as expected even if the exports are dynamically assigned (e.g. React):</p><div class="language-js"><pre><code><span class="token comment">// works as expected</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n</code></pre></div></li><li><p><strong>Performance:</strong> Vite converts ESM dependencies with many internal modules into a single module to improve subsequent page load performance.</p><p>Some packages ship their ES modules builds as many separate files importing one another. For example, <a href="https://unpkg.com/browse/lodash-es/" target="_blank" rel="noopener noreferrer"><code>lodash-es</code> has over 600 internal modules</a>! When we do <code>import { debounce } from &#39;lodash-es&#39;</code>, the browser fires off 600+ HTTP requests at the same time! Even though the server has no problem handling them, the large amount of requests create a network congestion on the browser side, causing the page to load noticeably slower.</p><p>By pre-bundling <code>lodash-es</code> into a single module, we now only need one HTTP request instead!</p></li></ol><h2 id="automatic-dependency-discovery"><a class="header-anchor" href="#automatic-dependency-discovery" aria-hidden="true">#</a> Automatic Dependency Discovery</h2><p>If an existing cache is not found, Vite will crawl your source code and automatically discover dependency imports (i.e. &quot;bare imports&quot; that expect to be resolved from <code>node_modules</code>) and use these found imports as entry points for the pre-bundle. The pre-bundling is performed with <code>esbuild</code> so it&#39;s typically very fast.</p><p>After the server has already started, if a new dependency import is encountered that isn&#39;t already in the cache, Vite will re-run the dep bundling process and reload the page.</p><h2 id="monorepos-and-linked-dependencies"><a class="header-anchor" href="#monorepos-and-linked-dependencies" aria-hidden="true">#</a> Monorepos and Linked Dependencies</h2><p>In a monorepo setup, a dependency may be a linked package from the same repo. Vite automatically detects dependencies that are not resolved from <code>node_modules</code> and treats the linked dep as source code. It will not attempt to bundle the linked dep, and instead will analyze the linked dep&#39;s dependency list instead.</p><h2 id="customizing-the-behavior"><a class="header-anchor" href="#customizing-the-behavior" aria-hidden="true">#</a> Customizing the Behavior</h2><p>The default dependency discovery heuristics may not always be desirable. In cases where you want to explicitly include/exclude dependencies from the list, use the <a href="/config/#dep-optimization-options"><code>optimizeDeps</code> config options</a>.</p><p>A typical use case for <code>optimizeDeps.include</code> or <code>optimizeDeps.exclude</code> is when you have an import that is not directly discoverable in the source code. For example, maybe the import is created as a result of a plugin transform. This means Vite won&#39;t be able to discover the import on the initial scan - it can only discover it after the file is requested by the browser and transformed. This will cause the server to immediately re-bundle after server start.</p><p>Both <code>include</code> and <code>exclude</code> can be used to deal with this. If the dependency is large (with many internal modules) or is CommonJS, then you should include it; If the dependency is small and is already valid ESM, you can exclude it and let the browser load it directly.</p><h2 id="caching"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> Caching</h2><h3 id="file-system-cache"><a class="header-anchor" href="#file-system-cache" aria-hidden="true">#</a> File System Cache</h3><p>Vite caches the pre-bundled dependencies in <code>node_modules/.vite</code>. It determines whether it needs to re-run the pre-bundling step based on a few sources:</p><ul><li>The <code>dependencies</code> list in your <code>package.json</code></li><li>Package manager lockfiles, e.g. <code>package-lock.json</code>, <code>yarn.lock</code>, or <code>pnpm-lock.yaml</code>.</li><li>Relevant fields in your <code>vite.config.js</code>, if present.</li></ul><p>The pre-bundling step will only need to be re-run when one of the above has changed.</p><p>If for some reason you want to force Vite to re-bundle deps, you can either start the dev server with the <code>--force</code> command line option, or manually delete the <code>node_modules/.vite</code> cache directory.</p><h3 id="browser-cache"><a class="header-anchor" href="#browser-cache" aria-hidden="true">#</a> Browser Cache</h3><p>Resolved dependency requests are strongly cached with HTTP headers <code>max-age=31536000,immutable</code> to improve page reload performance during dev. Once cached, these requests will never hit the dev server again. They are auto invalidated by the appended version query if a different version is installed (as reflected in your package manager lockfile). If you want to debug your dependencies by making local edits, you can:</p><ol><li>Temporarily disable cache via the Network tab of your browser devtools;</li><li>Restart Vite dev server with the <code>--force</code> flag to re-bundle the deps;</li><li>Reload the page.</li></ol>',24);t.render=function(n,a,t,i,s,r){return e(),o("div",null,[d])};export default t;export{a as __pageData};
