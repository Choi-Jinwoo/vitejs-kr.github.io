import{o as n,c as s,d as a}from"./app.e7552bbd.js";const e='{"title":"v1에서 마이그레션하기","description":"","frontmatter":{"title":"v1에서 마이그레션하기"},"headers":[{"level":2,"title":"설정 바꾸기","slug":"config-options-change"},{"level":2,"title":"별칭 동작 변경","slug":"alias-behavior-change"},{"level":2,"title":"Vue 지원","slug":"vue-support"},{"level":3,"title":"커스텀 블록 변환","slug":"custom-blocks-transforms"},{"level":2,"title":"React 지원","slug":"react-support"},{"level":2,"title":"HMR API 변경","slug":"hmr-api-change"},{"level":2,"title":"매니페스트 포맷 변경","slug":"manifest-format-change"},{"level":2,"title":"플러그인 개발자를 위해","slug":"for-plugin-authors"}],"relativePath":"guide/migration.md","lastUpdated":1630932615101}',t={},o=a('<h1 id="migrating-from-v1"><a class="header-anchor" href="#migrating-from-v1" aria-hidden="true">#</a>v1에서 마이그레션하기</h1><h2 id="config-options-change"><a class="header-anchor" href="#config-options-change" aria-hidden="true">#</a>설정 바꾸기</h2><ul><li><p>아래의 옵션들은 제거되었으며, <a href="./api-plugin.html">플러그인</a>을 통해 구현해야 합니다.</p><ul><li><code>resolvers</code></li><li><code>transforms</code></li><li><code>indexHtmlTransforms</code></li></ul></li><li><p><code>jsx</code>와 <code>enableEsbuild</code>는 제거되었습니다. 이 대신 새로운 <a href="/config/#esbuild"><code>esbuild</code></a> 옵션을 사용해주세요.</p></li><li><p><a href="/config/#css-modules">CSS 관련 옵션</a>은 이제 <code>css</code> 아래에 위치합니다.</p></li><li><p>모든 <a href="/config/#build-options">빌드별 옵션</a>는 이제 <code>build</code> 아래에 위치합니다.</p><ul><li><code>rollupInputOptions</code>와 <code>rollupOutputOptions</code>는 <a href="/config/#build-rollupoptions"><code>build.rollupOptions</code></a>로 대체되었습니다.</li><li><code>esbuildTarget</code>은 이제 <a href="/config/#build-target"><code>build.target</code></a> 입니다.</li><li><code>emitManifest</code>는 이제 <a href="/config/#build-manifest"><code>build.manifest</code></a> 입니다.</li><li>아래의 빌드 옵션은 제거되었으나, 플러그인 훅(Hook) 또는 기타 옵션을 통해 가져올 수 있습니다. <ul><li><code>entry</code></li><li><code>rollupDedupe</code></li><li><code>emitAssets</code></li><li><code>emitIndex</code></li><li><code>shouldPreload</code></li><li><code>configureBuild</code></li></ul></li></ul></li><li><p>모든 <a href="/config/#server-options">서버별 옵션</a>은 이제 <code>server</code> 아래에 위치합니다.</p><ul><li><code>hostname</code>은 이제 <a href="/config/#server-host"><code>server.host</code></a> 입니다.</li><li><code>httpsOptions</code>는 제거되었습니다. 대신, <a href="/config/#server-https"><code>server.https</code></a>가 직접 옵션 객체를 받을 수 있도록 구성되어 있습니다.</li><li><code>chokidarWatchOptions</code>는 이제 <a href="/config/#server-watch"><code>server.watch</code></a> 입니다.</li></ul></li><li><p><a href="/config/#assetsinclude"><code>assetsInclude</code></a>는 이제 함수 대신 <code>string | RegExp | (string | RegExp)[]</code> 타입으로 설정됩니다.</p></li><li><p>모든 Vue 옵션은 제거되었으며, Vue 플러그인에 옵션을 전달하도록 구성해야 합니다.</p></li></ul><h2 id="alias-behavior-change"><a class="header-anchor" href="#alias-behavior-change" aria-hidden="true">#</a>별칭 동작 변경</h2><p><a href="/config/#resolve-alias"><code>alias</code></a>는 이제 <code>@rollup/plugin-alias</code>로 전달되고, 더 이상 경로의 시작과 끝에 슬래시가 필요하지 않습니다. 따라서, 1.0 스타일의 디렉터리 별칭 키 끝에 있는 슬래시는 제거해주세요:</p><div class="language-diff"><pre><code><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> alias: { &#39;/@foo/&#39;: path.resolve(__dirname, &#39;some-special-dir&#39;) }\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> alias: { &#39;/@foo&#39;: path.resolve(__dirname, &#39;some-special-dir&#39;) }\n</span></span></code></pre></div><p>조금 더 세부적으로 구성하고자 한다면, <code>[{ find: RegExp, replacement: string }]</code> 형태로 이용할 수도 있습니다.</p><h2 id="vue-support"><a class="header-anchor" href="#vue-support" aria-hidden="true">#</a>Vue 지원</h2><p>Vite 2.0 코어는 이제 특정 프레임워크에 종속적이지 않습니다. Vue는 이제 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue" target="_blank" rel="noopener noreferrer"><code>@vitejs/plugin-vue</code></a>를 통해 제공되며, 간단하게 설치하고 아래와 같이 Vite 설정에 추가하기만 하면 됩니다.</p><div class="language-js"><pre><code><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="custom-blocks-transforms"><a class="header-anchor" href="#custom-blocks-transforms" aria-hidden="true">#</a>커스텀 블록 변환</h3><p>커스텀 플러그인을 사용해 아래와 같이 Vue 커스텀 블록을 변환(Transform)할 수 있습니다:</p><div class="language-ts"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;@vitejs/plugin-vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span>\n\n<span class="token keyword">const</span> vueI18nPlugin <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;vue-i18n&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">transform</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">vue&amp;type=i18n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ya?ml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      code <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;js-yaml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">safeLoad</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export default Comp =&gt; {\n      Comp.i18n = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n    }</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vueI18nPlugin<span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="react-support"><a class="header-anchor" href="#react-support" aria-hidden="true">#</a>React 지원</h2><p>React의 Fast Refresh는 이제 <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-react-refresh" target="_blank" rel="noopener noreferrer"><code>@vitejs/plugin-react-refresh</code></a> 플러그인을 통해 지원됩니다.</p><h2 id="hmr-api-change"><a class="header-anchor" href="#hmr-api-change" aria-hidden="true">#</a>HMR API 변경</h2><p><code>import.<wbr>meta.hot.acceptDeps()</code>는 더 이상 사용되지 않습니다. 또한 <a href="./api-hmr.html#hot-accept-deps-cb"><code>import.<wbr>meta.hot.accept()</code></a>는 이제 하나 이상의 디펜던시를 받을 수 있도록 구성되었습니다.</p><h2 id="manifest-format-change"><a class="header-anchor" href="#manifest-format-change" aria-hidden="true">#</a>매니페스트 포맷 변경</h2><p>이제 빌드 매니페스트는 아래와 같은 포맷을 사용합니다:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/index.acaf2b48.js&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;imports&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>...<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;index.css&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/index.7b7dbd85.css&quot;</span>\n  <span class="token punctuation">}</span>\n  <span class="token property">&quot;asset.png&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;assets/asset.0ab0f9cd.png&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>JS 청크 파일의 경우, 사전 로드 지시문(Preload Directives)을 렌더링하는 데 사용할 수 있도록 가져와진(Imported) 청크도 나열됩니다.</p><h2 id="for-plugin-authors"><a class="header-anchor" href="#for-plugin-authors" aria-hidden="true">#</a>플러그인 개발자를 위해</h2><p>Vite 2는 Rollup 플러그인을 확장하는 완전히 재설계된 플러그인 인터페이스를 사용합니다. 이와 관련된 내용은 새로운 <a href="./api-plugin.html">플러그인 개발 가이드</a>를 참고해주세요.</p><p>아래는 v1 플러그인을 v2로 마이그레이션하는 방법에 대한 몇 가지 지침 사항입니다:</p><ul><li><code>resolvers</code> -&gt; <a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a> 훅을 이용</li><li><code>transforms</code> -&gt; <a href="https://rollupjs.org/guide/en/#transform" target="_blank" rel="noopener noreferrer"><code>transform</code></a> 훅을 이용</li><li><code>indexHtmlTransforms</code> -&gt; <a href="./api-plugin.html#transformindexhtml"><code>transformIndexHtml</code></a> 훅을 이용</li><li>가상(Virtual) 파일 제공 -&gt; <a href="https://rollupjs.org/guide/en/#resolveid" target="_blank" rel="noopener noreferrer"><code>resolveId</code></a> + <a href="https://rollupjs.org/guide/en/#load" target="_blank" rel="noopener noreferrer"><code>load</code></a> 훅을 이용</li><li><code>alias</code>, <code>define</code> 또는 기타 설정 옵션 추가 -&gt; <a href="./api-plugin.html#config"><code>config</code></a> 훅을 이용</li></ul><p>대부분의 로직은 미들웨어가 아닌 플러그인 훅을 통해 이루어져야 하기 때문에, 미들웨어의 필요성은 크게 줄어들게 됩니다. 또한 Vite의 내부 서버는 이제 Koa가 아닌 <a href="https://github.com/senchalabs/connect" target="_blank" rel="noopener noreferrer">connect</a>의 인스턴스입니다.</p>',26);t.render=function(a,e,t,p,c,l){return n(),s("div",null,[o])};export default t;export{e as __pageData};
