import{o as n,c as a,a as s}from"./app.09df8c85.js";const e='{"title":"Building for Production","description":"","frontmatter":{},"headers":[{"level":2,"title":"Browser Compatibility","slug":"browser-compatibility"},{"level":2,"title":"Public Base Path","slug":"public-base-path"},{"level":2,"title":"Customizing the Build","slug":"customizing-the-build"},{"level":2,"title":"Multi-Page App","slug":"multi-page-app"},{"level":2,"title":"Library Mode","slug":"library-mode"}],"relativePath":"guide/build.md","lastUpdated":1620969613914}',t={},o=s('<h1 id="building-for-production"><a class="header-anchor" href="#building-for-production" aria-hidden="true">#</a> Building for Production</h1><p>When it is time to deploy your app for production, simply run the <code>vite build</code> command. By default, it uses <code>&lt;root&gt;/index.html</code> as the build entry point, and produces an application bundle that is suitable to be served over a static hosting service. Check out the <a href="./static-deploy.html">Deploying a Static Site</a> for guides about popular services.</p><h2 id="browser-compatibility"><a class="header-anchor" href="#browser-compatibility" aria-hidden="true">#</a> Browser Compatibility</h2><p>The production bundle assumes a baseline support for modern JavaScript. By default, all code is transpiled targeting <a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">browsers with native ESM script tag support</a>:</p><ul><li>Chrome &gt;=61</li><li>Firefox &gt;=60</li><li>Safari &gt;=11</li><li>Edge &gt;=16</li></ul><p>A lightweight <a href="https://github.com/GoogleChromeLabs/dynamic-import-polyfill" target="_blank" rel="noopener noreferrer">dynamic import polyfill</a> is also automatically injected.</p><p>You can specify custom targets via the <a href="/config/#build-target"><code>build.target</code> config option</a>, where the lowest target is <code>es2015</code>.</p><p>Note that by default, Vite only handles syntax transforms and <strong>does not cover polyfills by default</strong>. You can check out <a href="https://polyfill.io/v3/" target="_blank" rel="noopener noreferrer">Polyfill.io</a> which is a service that automatically generates polyfill bundles based on the user&#39;s browser UserAgent string.</p><p>Legacy browsers can be supported via <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy" target="_blank" rel="noopener noreferrer">@vitejs/plugin-legacy</a>, which will automatically generate legacy chunks and corresponding ES language feature polyfills. The legacy chunks are conditionally loaded only in browsers that do not have native ESM support.</p><h2 id="public-base-path"><a class="header-anchor" href="#public-base-path" aria-hidden="true">#</a> Public Base Path</h2><ul><li>Related: <a href="./assets.html">Asset Handling</a></li></ul><p>If you are deploying your project under a nested public path, simply specify the <a href="/config/#base"><code>base</code> config option</a> and all asset paths will be rewritten accordingly. This option can also be specified as a command line flag, e.g. <code>vite build --base=/my/public/path/</code>.</p><p>JS-imported asset URLs, CSS <code>url()</code> references, and asset references in your <code>.html</code> files are all automatically adjusted to respect this option during build.</p><p>The exception is when you need to dynamically concatenate URLs on the fly. In this case, you can use the globally injected <code>import.<wbr>meta.env.BASE_URL</code> variable which will be the public base path. Note this variable is statically replaced during build so it must appear exactly as-is (i.e. <code>import.<wbr>meta.env[&#39;BASE_URL&#39;]</code> won&#39;t work).</p><h2 id="customizing-the-build"><a class="header-anchor" href="#customizing-the-build" aria-hidden="true">#</a> Customizing the Build</h2><p>The build can be customized via various <a href="/config/#build-options">build config options</a>. Specifically, you can directly adjust the underlying <a href="https://rollupjs.org/guide/en/#big-list-of-options" target="_blank" rel="noopener noreferrer">Rollup options</a> via <code>build.rollupOptions</code>:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// https://rollupjs.org/guide/en/#big-list-of-options</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>For example, you can specify multiple Rollup outputs with plugins that are only applied during build.</p><h2 id="multi-page-app"><a class="header-anchor" href="#multi-page-app" aria-hidden="true">#</a> Multi-Page App</h2><p>Suppose you have the following source code structure:</p><div class="language-"><pre><code>├── package.json\n├── vite.config.js\n├── index.html\n├── main.js\n└── nested\n    ├── index.html\n    └── nested.js\n</code></pre></div><p>During dev, simply navigate or link to <code>/nested/</code> - it works as expected, just like for a normal static file server.</p><p>During build, all you need to do is to specify multiple <code>.html</code> files as entry points:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      input<span class="token operator">:</span> <span class="token punctuation">{</span>\n        main<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        nested<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;nested/index.html&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="library-mode"><a class="header-anchor" href="#library-mode" aria-hidden="true">#</a> Library Mode</h2><p>When you are developing a browser-oriented library, you are likely spending most of the time on a test/demo page that imports your actual library. With Vite, you can use your <code>index.html</code> for that purpose to get the smooth development experience.</p><p>When it is time to bundle your library for distribution, use the <a href="/config/#build-lib"><code>build.lib</code> config option</a>. Make sure to also externalize any dependencies that you do not want to bundle into your library, e.g. <code>vue</code> or <code>react</code>:</p><div class="language-js"><pre><code><span class="token comment">// vite.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  build<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lib<span class="token operator">:</span> <span class="token punctuation">{</span>\n      entry<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;lib/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;MyLib&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    rollupOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// make sure to externalize deps that shouldn&#39;t be bundled</span>\n      <span class="token comment">// into your library</span>\n      external<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      output<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Provide global variables to use in the UMD build</span>\n        <span class="token comment">// for externalized deps</span>\n        globals<span class="token operator">:</span> <span class="token punctuation">{</span>\n          vue<span class="token operator">:</span> <span class="token string">&#39;Vue&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Running <code>vite build</code> with this config uses a Rollup preset that is oriented towards shipping libraries and produces two bundle formats: <code>es</code> and <code>umd</code> (configurable via <code>build.lib</code>):</p><div class="language-"><pre><code>$ vite build\nbuilding for production...\n[write] my-lib.es.js 0.08kb, brotli: 0.07kb\n[write] my-lib.umd.js 0.30kb, brotli: 0.16kb\n</code></pre></div><p>Recommended <code>package.json</code> for your lib:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-lib&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dist&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.umd.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.es.js&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;import&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.es.js&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/my-lib.umd.js&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',32);t.render=function(s,e,t,p,i,l){return n(),a("div",null,[o])};export default t;export{e as __pageData};
