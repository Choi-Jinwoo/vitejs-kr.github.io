import{o as e,c as o,d as n}from"./app.51a0c38b.js";const a='{"title":"Env Variables and Modes","description":"","frontmatter":{"title":"Env Variables and Modes"},"headers":[{"level":2,"title":"Env Variables","slug":"env-variables"},{"level":3,"title":"Production Replacement","slug":"production-replacement"},{"level":2,"title":".env Files","slug":"env-files"},{"level":3,"title":"IntelliSense","slug":"intellisense"},{"level":2,"title":"Modes","slug":"modes"}],"relativePath":"guide/env-and-mode.md","lastUpdated":1624773506384}',t={},i=n('<h1 id="env-variables-and-modes"><a class="header-anchor" href="#env-variables-and-modes" aria-hidden="true">#</a>Env Variables and Modes</h1><h2 id="env-variables"><a class="header-anchor" href="#env-variables" aria-hidden="true">#</a>Env Variables</h2><p>Vite exposes env variables on the special <strong><code>import.<wbr>meta.env</code></strong> object. Some built-in variables are available in all cases:</p><ul><li><p><strong><code>import.<wbr>meta.env.MODE</code></strong>: {string} the <a href="#modes">mode</a> the app is running in.</p></li><li><p><strong><code>import.<wbr>meta.env.BASE_URL</code></strong>: {string} the base url the app is being served from. This is determined by the <a href="/config/#base"><code>base</code> config option</a>.</p></li><li><p><strong><code>import.<wbr>meta.env.PROD</code></strong>: {boolean} whether the app is running in production.</p></li><li><p><strong><code>import.<wbr>meta.env.DEV</code></strong>: {boolean} whether the app is running in development (always the opposite of <code>import.<wbr>meta.env.PROD</code>)</p></li></ul><h3 id="production-replacement"><a class="header-anchor" href="#production-replacement" aria-hidden="true">#</a>Production Replacement</h3><p>During production, these env variables are <strong>statically replaced</strong>. It is therefore necessary to always reference them using the full static string. For example, dynamic key access like <code>import.<wbr>meta.env[key]</code> will not work.</p><p>It will also replace these strings appearing in JavaScript strings and Vue templates. This should be a rare case, but it can be unintended. There are ways to work around this behavior:</p><ul><li><p>For JavaScript strings, you can break the string up with a unicode zero-width space, e.g. <code>&#39;import.<wbr>meta\\u200b.env.MODE&#39;</code>.</p></li><li><p>For Vue templates or other HTML that gets compiled into JavaScript strings, you can use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr" target="_blank" rel="noopener noreferrer"><code>&lt;wbr&gt;</code> tag</a>, e.g. <code>import.<wbr>meta.&lt;wbr&gt;env.MODE</code>.</p></li></ul><h2 id="env-files"><a class="header-anchor" href="#env-files" aria-hidden="true">#</a><code>.env</code>Files</h2><p>Vite uses <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer">dotenv</a> to load additional environment variables from the following files in your <a href="/config/#envDir">environment directory</a>:</p><div class="language-"><pre><code>.env                # loaded in all cases\n.env.local          # loaded in all cases, ignored by git\n.env.[mode]         # only loaded in specified mode\n.env.[mode].local   # only loaded in specified mode, ignored by git\n</code></pre></div><p>Loaded env variables are also exposed to your client source code via <code>import.<wbr>meta.env</code>.</p><p>To prevent accidentally leaking env variables to the client, only variables prefixed with <code>VITE_</code> are exposed to your Vite-processed code. e.g. the following file:</p><div class="language-"><pre><code>DB_PASSWORD=foobar\nVITE_SOME_KEY=123\n</code></pre></div><p>Only <code>VITE_SOME_KEY</code> will be exposed as <code>import.<wbr>meta.env.VITE_SOME_KEY</code> to your client source code, but <code>DB_PASSWORD</code> will not.</p><div class="warning custom-block"><p class="custom-block-title">SECURITY NOTES</p><ul><li><p><code>.env.*.local</code> files are local-only and can contain sensitive variables. You should add <code>.local</code> to your <code>.gitignore</code> to avoid them being checked into git.</p></li><li><p>Since any variables exposed to your Vite source code will end up in your client bundle, <code>VITE_*</code> variables should <em>not</em> contain any sensitive information.</p></li></ul></div><h3 id="intellisense"><a class="header-anchor" href="#intellisense" aria-hidden="true">#</a>IntelliSense</h3><p>By default, Vite provides type definition for <code>import.<wbr>meta.env</code>. While you can define more custom env variables in <code>.env.[mode]</code> files, you may want to get TypeScript IntelliSense for user-defined env variables which prefixed with <code>VITE_</code>.</p><p>To achieve, you can create an <code>env.d.ts</code> in <code>src</code> directory, then augment <code>ImportMetaEnv</code> like this:</p><div class="language-typescript"><pre><code><span class="token keyword">interface</span> <span class="token class-name">ImportMetaEnv</span> <span class="token punctuation">{</span>\n  <span class="token constant">VITE_APP_TITLE</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token comment">// more env variables...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="modes"><a class="header-anchor" href="#modes" aria-hidden="true">#</a>Modes</h2><p>By default, the dev server (<code>serve</code> command) runs in <code>development</code> mode, and the <code>build</code> command runs in <code>production</code> mode.</p><p>This means when running <code>vite build</code>, it will load the env variables from <code>.env.production</code> if there is one:</p><div class="language-"><pre><code># .env.production\nVITE_APP_TITLE=My App\n</code></pre></div><p>In your app, you can render the title using <code>import.<wbr>meta.env.VITE_APP_TITLE</code>.</p><p>However, it is important to understand that <strong>mode</strong> is a wider concept than just development vs. production. A typical example is you may want to have a &quot;staging&quot; mode where it should have production-like behavior, but with slightly different env variables from production.</p><p>You can overwrite the default mode used for a command by passing the <code>--mode</code> option flag. For example, if you want to build your app for our hypothetical staging mode:</p><div class="language-bash"><pre><code>vite build --mode staging\n</code></pre></div><p>And to get the behavior we want, we need a <code>.env.staging</code> file:</p><div class="language-"><pre><code># .env.staging\nNODE_ENV=production\nVITE_APP_TITLE=My App (staging)\n</code></pre></div><p>Now your staging app should have production-like behavior, but displaying a different title from production.</p>',31);t.render=function(n,a,t,r,d,s){return e(),o("div",null,[i])};export default t;export{a as __pageData};
